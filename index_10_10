<html>


<head>
  <meta charset="UTF-8">
  <title>INFO 3300: Project 1 Milestone 2</title>
  <script src="https://d3js.org/d3.v7.min.js"></script>
</head>


<body>
  <h3>Matthew Mentis-Cort (mam692), Dani Ojeda (dr497), Jenny Jung (jj427)</h3>
  <p id="Scatter Plot">Visualization 1: Scatterplot: Duration vs. Release Year (TV Shows & Movies)</p>
  <p id="q2">Problem 2</p>
  <svg id="svg1" height="700" width="700"></svg>
  <svg id="svg2" height="500" width="500"></svg>
  <svg id="legend-element" height="500" width="500"></svg>
  <script>
    /* Constants */
    // all chart margins
    const margin = { top: 10, right: 10, bottom: 40, left: 50 };


    // svg1 constants
    const svg = d3.select("#svg1");
    const width = svg.attr("width");
    const height = svg.attr("height");
    const newWidth = width - margin.left - margin.right;
    const newHeight = height - margin.top - margin.bottom;


    // svg2 constants
    const svg2 = d3.select("#svg2");
    const svg2Width = svg2.attr("width");
    const svg2Height = svg2.attr("height");
    const svg2ChartWidth = svg2Width - margin.left - margin.right;
    const svg2ChartHeight = svg2Height - margin.top - margin.bottom;


    // legend
    const legendSVG = d3.select('svg#legend-element');


    /* Netflix dataset visualization */
    d3.csv('netflix_titles_cleaned_with_office.csv', d3.autoType).then((data) => {
      console.log(data);


      let newArea = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");


      const durationExtent = d3.extent(data, d => d.duration);
      const durationScale = d3.scaleLinear().domain([0, d3.max(data, d => d.duration)]).range([newHeight, 0]);


      let leftAxis = d3.axisLeft(durationScale);
      let leftGridlines = d3.axisLeft(durationScale).tickSize(-newWidth).tickFormat("");
      newArea.append('g')
        .attr('class', 'y axis')
        .call(leftAxis);
        
      newArea.append("g").attr("class", "y gridlines").call(leftGridlines);

            const releaseYearExtent = d3.extent(data, d => d.release_year);
      const releaseYearScale = d3.scaleLinear().domain(releaseYearExtent).range([0, newWidth]);
     
      let bottomAxis = d3.axisBottom(releaseYearScale);
      let bottomGridlines = d3.axisBottom(releaseYearScale).tickSize(-newHeight).tickFormat("");
      newArea.append('g').attr('class', 'x axis').attr('transform', `translate(0, ${newHeight})`).call(bottomAxis);
      newArea.append("g").attr("class", "x gridlines").call(bottomGridlines);

      data.forEach(d => {
        newArea.append("circle")
          .attr("cx", releaseYearScale(d.release_year))
          .attr("cy", durationScale(d.duration))
          .attr("r", 5)
          .attr('opacity', 0.7)
          .attr("fill", d.type === 'Movie' ? '#e8502f' : '#0e98a6')
      });
    });


    /* HBO dataset visualization */
    // averaging for svg2 visualization
    d3.csv('titles.csv', d3.autoType).then((data) => {
      const movieStats = {};
      let maxim = 0;
      let max_year = 0;


      data.forEach(d => {
        if (d.type == 'MOVIE') {
          const year = (d.release_year);
          if (!movieStats[year]) {
            movieStats[year] = { totalLength: 0, count: 0 };
          }


          movieStats[year].totalLength += d.runtime;
          movieStats[year].count += 1;


          if (movieStats[year].totalLength / movieStats[year].count > maxim) {
            maxim = movieStats[year].totalLength / movieStats[year].count;
            max_year = d.release_year;
          }
        }
      });


      const tvStats = {};


      data.forEach(d => {
        if (d.type == 'SHOW') {
          const year = (d.release_year);
          if (!tvStats[year]) {
            tvStats[year] = { totalLength: 0, count: 0 };
          }


          tvStats[year].totalLength += d.runtime;
          tvStats[year].count += 1;


          if (tvStats[year].totalLength / tvStats[year].count > maxim) {
            maxim = tvStats[year].totalLength / tvStats[year].count;
            max_year = d.release_year;
          }
        }


      });
      console.log(maxim);
      console.log(max_year);


      let newArea = svg2.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");


      //    const durationExtent = d3.extent(movieStats, );
      const durationScale = d3.scaleLinear().domain([0, maxim]).range([svg2ChartHeight, 0]);
      const releaseYearExtent = d3.extent(data, d => d.release_year);
      const releaseYearScale = d3.scaleLinear().domain(releaseYearExtent).range([0, svg2ChartWidth]);


      let leftAxis = d3.axisLeft(durationScale).tickFormat("");
      newArea.append('g').attr('class', 'y axis').call(leftAxis);
      let bottomAxis = d3.axisBottom(releaseYearScale).tickFormat("");
      newArea.append('g').attr('class', 'x axis').call(bottomAxis);


      for (const year in movieStats) {
        const { totalLength, count } = movieStats[year];
        const averageLength = totalLength / count;
        if (!isNaN(totalLength)) {
          //
          newArea.append("circle")
            .attr("cx", releaseYearScale(year))
            .attr("cy", durationScale(averageLength))
            .attr("r", 5)
            .attr('opacity', 0.7)
            .attr("fill", '#e8502f');
          console.log(`Year: ${year}, Total Length: ${totalLength} mins, Count: ${count}, Average Length: ${averageLength.toFixed(2)} mins`);
        }
      }


      for (const year in tvStats) {
        const { totalLength, count } = tvStats[year];
        const averageLength = totalLength / count;
        if (!isNaN(totalLength)) {
          //
          newArea.append("circle")
            .attr("cx", releaseYearScale(year))
            .attr("cy", durationScale(averageLength))
            .attr("r", 5)
            .attr('opacity', 0.7)
            .attr("fill", '#0e98a6');


          console.log(`Year: ${year}, Total Length: ${totalLength} mins, Count: ${count}, Average Length: ${averageLength.toFixed(2)} mins`);
        }
      }
    });
    


    // legend
    legendSVG.append("rect")
      .attr("x", 50)
      .attr("y", 50)
      .attr("width", 50)
      .attr("height", 50)
      .attr("fill", "#e8502f");


    legendSVG.append("text")
      .attr("x", 120)
      .attr("y", 80)
      .text("Movies");


    legendSVG.append("rect")
      .attr("x", 50)
      .attr("y", 150)
      .attr("width", 50)
      .attr("height", 50)
      .attr("fill", "#0e98a6");


    legendSVG.append("text")
      .attr("x", 120)
      .attr("y", 180)
      .text("TV Shows");
  </script>
</body>


</html>
